from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from flask_httpauth import HTTPBasicAuth
from datetime import datetime

# Initialize the Flask app and extensions
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///library.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
auth = HTTPBasicAuth()

# User roles
ADMIN_ROLE = 'admin'
USER_ROLE = 'user'

# Database Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    role = db.Column(db.String(50), nullable=False)

class Book(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    author = db.Column(db.String(100), nullable=False)

class BorrowRequest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    book_id = db.Column(db.Integer, db.ForeignKey('book.id'), nullable=False)
    start_date = db.Column(db.Date, nullable=False)
    end_date = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(50), default='pending')  # pending, approved, denied

# Authentication
@auth.verify_password
def verify_password(email, password):
    user = User.query.filter_by(email=email).first()
    if user and check_password_hash(user.password, password):
        return user

# Decorator to restrict routes to admin only
def admin_required(f):
    def wrapper(*args, **kwargs):
        user = auth.current_user()
        if user.role != ADMIN_ROLE:
            return jsonify({'error': 'Admin access required'}), 403
        return f(*args, **kwargs)
    return wrapper

# Librarian APIs
@app.route('/admin/create-user', methods=['POST'])
@auth.login_required
@admin_required
def create_user():
    data = request.json
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({'error': 'Email and password are required'}), 400

    if User.query.filter_by(email=email).first():
        return jsonify({'error': 'User already exists'}), 400

    hashed_password = generate_password_hash(password)
    new_user = User(email=email, password=hashed_password, role=USER_ROLE)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': 'User created successfully'}), 201

@app.route('/admin/borrow-requests', methods=['GET'])
@auth.login_required
@admin_required
def view_borrow_requests():
    requests = BorrowRequest.query.all()
    return jsonify([{
        'id': r.id,
        'user_id': r.user_id,
        'book_id': r.book_id,
        'start_date': r.start_date.strftime('%Y-%m-%d'),
        'end_date': r.end_date.strftime('%Y-%m-%d'),
        'status': r.status
    } for r in requests])

@app.route('/admin/borrow-requests/<int:request_id>', methods=['PUT'])
@auth.login_required
@admin_required
def approve_or_deny_request(request_id):
    data = request.json
    status = data.get('status')

    if status not in ['approved', 'denied']:
        return jsonify({'error': 'Invalid status'}), 400

    borrow_request = BorrowRequest.query.get(request_id)
    if not borrow_request:
        return jsonify({'error': 'Borrow request not found'}), 404

    # Ensure no overlapping dates for approved requests
    if status == 'approved':
        overlapping = BorrowRequest.query.filter(
            BorrowRequest.book_id == borrow_request.book_id,
            BorrowRequest.status == 'approved',
            BorrowRequest.start_date <= borrow_request.end_date,
            BorrowRequest.end_date >= borrow_request.start_date
        ).first()
        if overlapping:
            return jsonify({'error': 'Overlapping borrow dates'}), 400

    borrow_request.status = status
    db.session.commit()

    return jsonify({'message': f'Request {status} successfully'}), 200

@app.route('/admin/user-history/<int:user_id>', methods=['GET'])
@auth.login_required
@admin_required
def view_user_history(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404

    history = BorrowRequest.query.filter_by(user_id=user_id).all()
    return jsonify([{
        'book_id': h.book_id,
        'start_date': h.start_date.strftime('%Y-%m-%d'),
        'end_date': h.end_date.strftime('%Y-%m-%d'),
        'status': h.status
    } for h in history])

# Library User APIs
@app.route('/books', methods=['GET'])
@auth.login_required
def get_books():
    books = Book.query.all()
    return jsonify([{
        'id': b.id,
        'title': b.title,
        'author': b.author
    } for b in books])

@app.route('/borrow', methods=['POST'])
@auth.login_required
def borrow_book():
    user = auth.current_user()
    data = request.json
    book_id = data.get('book_id')
    start_date = data.get('start_date')
    end_date = data.get('end_date')

    if not book_id or not start_date or not end_date:
        return jsonify({'error': 'Book ID, start date, and end date are required'}), 400

    book = Book.query.get(book_id)
    if not book:
        return jsonify({'error': 'Book not found'}), 404

    start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
    end_date = datetime.strptime(end_date, '%Y-%m-%d').date()

    if start_date >= end_date:
        return jsonify({'error': 'Invalid date range'}), 400

    # Check for overlapping requests
    overlapping = BorrowRequest.query.filter(
        BorrowRequest.book_id == book_id,
        BorrowRequest.status == 'approved',
        BorrowRequest.start_date <= end_date,
        BorrowRequest.end_date >= start_date
    ).first()
    if overlapping:
        return jsonify({'error': 'Book already borrowed for these dates'}), 400

    borrow_request = BorrowRequest(
        user_id=user.id,
        book_id=book_id,
        start_date=start_date,
        end_date=end_date
    )
    db.session.add(borrow_request)
    db.session.commit()

    return jsonify({'message': 'Borrow request submitted successfully'}), 201

@app.route('/history', methods=['GET'])
@auth.login_required
def view_personal_history():
    user = auth.current_user()
    history = BorrowRequest.query.filter_by(user_id=user.id).all()
    return jsonify([{
        'book_id': h.book_id,
        'start_date': h.start_date.strftime('%Y-%m-%d'),
        'end_date': h.end_date.strftime('%Y-%m-%d'),
        'status': h.status
    } for h in history])

# Initialize the database
with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True)
